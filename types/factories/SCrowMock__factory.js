"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SCrowMock__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "string",
                name: "name",
                type: "string",
            },
            {
                internalType: "string",
                name: "symbol",
                type: "string",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "owner",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "spender",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
        ],
        name: "Approval",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "from",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
        ],
        name: "Transfer",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address",
            },
            {
                internalType: "address",
                name: "spender",
                type: "address",
            },
        ],
        name: "allowance",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "approve",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address",
            },
        ],
        name: "balanceOf",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "decimals",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "subtractedValue",
                type: "uint256",
            },
        ],
        name: "decreaseAllowance",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "generateSupply",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "addedValue",
                type: "uint256",
            },
        ],
        name: "increaseAllowance",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "name",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "symbol",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "totalSupply",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "transfer",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "from",
                type: "address",
            },
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "transferFrom",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x60806040523480156200001157600080fd5b5060405162001825380380620018258339818101604052810190620000379190620001a3565b818181600390805190602001906200005192919062000075565b5080600490805190602001906200006a92919062000075565b5050505050620003ac565b8280546200008390620002bd565b90600052602060002090601f016020900481019282620000a75760008555620000f3565b82601f10620000c257805160ff1916838001178555620000f3565b82800160010185558215620000f3579182015b82811115620000f2578251825591602001919060010190620000d5565b5b50905062000102919062000106565b5090565b5b808211156200012157600081600090555060010162000107565b5090565b60006200013c620001368462000251565b62000228565b9050828152602081018484840111156200015b576200015a6200038c565b5b6200016884828562000287565b509392505050565b600082601f83011262000188576200018762000387565b5b81516200019a84826020860162000125565b91505092915050565b60008060408385031215620001bd57620001bc62000396565b5b600083015167ffffffffffffffff811115620001de57620001dd62000391565b5b620001ec8582860162000170565b925050602083015167ffffffffffffffff81111562000210576200020f62000391565b5b6200021e8582860162000170565b9150509250929050565b60006200023462000247565b9050620002428282620002f3565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026f576200026e62000358565b5b6200027a826200039b565b9050602081019050919050565b60005b83811015620002a75780820151818401526020810190506200028a565b83811115620002b7576000848401525b50505050565b60006002820490506001821680620002d657607f821691505b60208210811415620002ed57620002ec62000329565b5b50919050565b620002fe826200039b565b810181811067ffffffffffffffff8211171562000320576200031f62000358565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61146980620003bc6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80633950935111610071578063395093511461018f57806370a08231146101bf57806395d89b41146101ef578063a457c2d71461020d578063a9059cbb1461023d578063dd62ed3e1461026d576100b4565b806306fdde03146100b9578063095ea7b3146100d7578063163bab371461010757806318160ddd1461012357806323b872dd14610141578063313ce56714610171575b600080fd5b6100c161029d565b6040516100ce9190610ee1565b60405180910390f35b6100f160048036038101906100ec9190610d08565b61032f565b6040516100fe9190610ec6565b60405180910390f35b610121600480360381019061011c9190610d08565b610352565b005b61012b610360565b6040516101389190611003565b60405180910390f35b61015b60048036038101906101569190610cb5565b61036a565b6040516101689190610ec6565b60405180910390f35b610179610399565b604051610186919061101e565b60405180910390f35b6101a960048036038101906101a49190610d08565b6103a2565b6040516101b69190610ec6565b60405180910390f35b6101d960048036038101906101d49190610c48565b6103d9565b6040516101e69190611003565b60405180910390f35b6101f7610421565b6040516102049190610ee1565b60405180910390f35b61022760048036038101906102229190610d08565b6104b3565b6040516102349190610ec6565b60405180910390f35b61025760048036038101906102529190610d08565b61052a565b6040516102649190610ec6565b60405180910390f35b61028760048036038101906102829190610c75565b61054d565b6040516102949190611003565b60405180910390f35b6060600380546102ac90611133565b80601f01602080910402602001604051908101604052809291908181526020018280546102d890611133565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b5050505050905090565b60008061033a6105d4565b90506103478185856105dc565b600191505092915050565b61035c82826107a7565b5050565b6000600254905090565b6000806103756105d4565b9050610382858285610907565b61038d858585610993565b60019150509392505050565b60006012905090565b6000806103ad6105d4565b90506103ce8185856103bf858961054d565b6103c99190611055565b6105dc565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461043090611133565b80601f016020809104026020016040519081016040528092919081815260200182805461045c90611133565b80156104a95780601f1061047e576101008083540402835291602001916104a9565b820191906000526020600020905b81548152906001019060200180831161048c57829003601f168201915b5050505050905090565b6000806104be6105d4565b905060006104cc828661054d565b905083811015610511576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050890610fc3565b60405180910390fd5b61051e82868684036105dc565b60019250505092915050565b6000806105356105d4565b9050610542818585610993565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561064c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064390610fa3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156106bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b390610f23565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161079a9190611003565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080e90610fe3565b60405180910390fd5b61082360008383610c14565b80600260008282546108359190611055565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461088a9190611055565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516108ef9190611003565b60405180910390a361090360008383610c19565b5050565b6000610913848461054d565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461098d578181101561097f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097690610f43565b60405180910390fd5b61098c84848484036105dc565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fa90610f83565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6a90610f03565b60405180910390fd5b610a7e838383610c14565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afb90610f63565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b979190611055565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610bfb9190611003565b60405180910390a3610c0e848484610c19565b50505050565b505050565b505050565b600081359050610c2d81611405565b92915050565b600081359050610c428161141c565b92915050565b600060208284031215610c5e57610c5d6111c3565b5b6000610c6c84828501610c1e565b91505092915050565b60008060408385031215610c8c57610c8b6111c3565b5b6000610c9a85828601610c1e565b9250506020610cab85828601610c1e565b9150509250929050565b600080600060608486031215610cce57610ccd6111c3565b5b6000610cdc86828701610c1e565b9350506020610ced86828701610c1e565b9250506040610cfe86828701610c33565b9150509250925092565b60008060408385031215610d1f57610d1e6111c3565b5b6000610d2d85828601610c1e565b9250506020610d3e85828601610c33565b9150509250929050565b610d51816110bd565b82525050565b6000610d6282611039565b610d6c8185611044565b9350610d7c818560208601611100565b610d85816111c8565b840191505092915050565b6000610d9d602383611044565b9150610da8826111d9565b604082019050919050565b6000610dc0602283611044565b9150610dcb82611228565b604082019050919050565b6000610de3601d83611044565b9150610dee82611277565b602082019050919050565b6000610e06602683611044565b9150610e11826112a0565b604082019050919050565b6000610e29602583611044565b9150610e34826112ef565b604082019050919050565b6000610e4c602483611044565b9150610e578261133e565b604082019050919050565b6000610e6f602583611044565b9150610e7a8261138d565b604082019050919050565b6000610e92601f83611044565b9150610e9d826113dc565b602082019050919050565b610eb1816110e9565b82525050565b610ec0816110f3565b82525050565b6000602082019050610edb6000830184610d48565b92915050565b60006020820190508181036000830152610efb8184610d57565b905092915050565b60006020820190508181036000830152610f1c81610d90565b9050919050565b60006020820190508181036000830152610f3c81610db3565b9050919050565b60006020820190508181036000830152610f5c81610dd6565b9050919050565b60006020820190508181036000830152610f7c81610df9565b9050919050565b60006020820190508181036000830152610f9c81610e1c565b9050919050565b60006020820190508181036000830152610fbc81610e3f565b9050919050565b60006020820190508181036000830152610fdc81610e62565b9050919050565b60006020820190508181036000830152610ffc81610e85565b9050919050565b60006020820190506110186000830184610ea8565b92915050565b60006020820190506110336000830184610eb7565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611060826110e9565b915061106b836110e9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110a05761109f611165565b5b828201905092915050565b60006110b6826110c9565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561111e578082015181840152602081019050611103565b8381111561112d576000848401525b50505050565b6000600282049050600182168061114b57607f821691505b6020821081141561115f5761115e611194565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61140e816110ab565b811461141957600080fd5b50565b611425816110e9565b811461143057600080fd5b5056fea2646970667358221220386a74e0b3b881dfe6a4e1a623f6e2e86d930ea6773051a4ced9d0be48ceed1964736f6c63430008070033";
const isSuperArgs = (xs) => xs.length > 1;
class SCrowMock__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
        this.contractName = "SCrowMock";
    }
    deploy(name, symbol, overrides) {
        return super.deploy(name, symbol, overrides || {});
    }
    getDeployTransaction(name, symbol, overrides) {
        return super.getDeployTransaction(name, symbol, overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.SCrowMock__factory = SCrowMock__factory;
SCrowMock__factory.bytecode = _bytecode;
SCrowMock__factory.abi = _abi;
